import streamlit as st
import google.generativeai as genai
import requests
from datetime import datetime
import pytz

# üîê API key g·∫Øn tr·ª±c ti·∫øp
GEMINI_API_KEY = "AIzaSyBBRBfkvzjngvok5MT6yqveb7hY6Gk8b7k"
WEATHER_API_KEY = "e7c8cefb28a5ab6d805c8bfe89f59375"

# ‚öôÔ∏è C·∫•u h√¨nh Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(model_name="gemini-2.0-flash")

# üïí L·∫•y gi·ªù Vi·ªát Nam ch√≠nh x√°c
def get_current_time_vietnam():
    try:
        tz = pytz.timezone("Asia/Ho_Chi_Minh")
        now = datetime.now(tz)
        return now.strftime("%H:%M:%S")
    except:
        return None

# üìÜ L·∫•y ng√†y h√¥m nay theo ti·∫øng Vi·ªát
def get_current_date_vietnam():
    try:
        tz = pytz.timezone("Asia/Ho_Chi_Minh")
        now = datetime.now(tz)
        weekdays = {
            0: "Th·ª© Hai", 1: "Th·ª© Ba", 2: "Th·ª© T∆∞",
            3: "Th·ª© NƒÉm", 4: "Th·ª© S√°u", 5: "Th·ª© B·∫£y", 6: "Ch·ªß Nh·∫≠t"
        }
        weekday = weekdays[now.weekday()]
        return f"H√¥m nay l√† {weekday}, ng√†y {now.day} th√°ng {now.month} nƒÉm {now.year}."
    except:
        return None

# üå°Ô∏è L·∫•y th·ªùi ti·∫øt
def get_weather(city):
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=vi"
        response = requests.get(url).json()
        if response.get("cod") != 200:
            return None
        temp = response["main"]["temp"]
        weather = response["weather"][0]["description"]
        return f"Nhi·ªát ƒë·ªô hi·ªán t·∫°i ·ªü {city.title()} l√† {temp}¬∞C, tr·ªùi {weather}."
    except:
        return None

# üöÄ Giao di·ªán
st.set_page_config(page_title="Gemini Chatbot ", page_icon="üå§Ô∏è")
st.title("ü§ñ Gemini Chatbot ")

# L∆∞u l·ªãch s·ª≠ chat
if "messages" not in st.session_state:
    st.session_state.messages = []

# Hi·ªÉn th·ªã l·ªãch s·ª≠
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# √î nh·∫≠p c√¢u h·ªèi
query = st.chat_input("Nh·∫≠p c√¢u h·ªèi...")

if query:
    st.session_state.messages.append({"role": "user", "content": query})
    with st.chat_message("user"):
        st.markdown(query)

    query_lower = query.lower()
    reply = ""

    # N·∫øu h·ªèi v·ªÅ th·ªùi ti·∫øt
    if "nhi·ªát ƒë·ªô" in query_lower or "th·ªùi ti·∫øt" in query_lower:
        for word in query_lower.split():
            result = get_weather(word)
            if result:
                reply = result
                break

    # N·∫øu h·ªèi v·ªÅ th·ªùi gian ho·∫∑c ng√†y h√¥m nay
    elif "m·∫•y gi·ªù" in query_lower or "th·ªùi gian" in query_lower or "h√¥m nay l√†" in query_lower or "ng√†y m·∫•y" in query_lower:
        if "ng√†y" in query_lower or "th·ª©" in query_lower:
            reply = get_current_date_vietnam()
        elif "gi·ªù" in query_lower or "m·∫•y gi·ªù" in query_lower:
            time_now = get_current_time_vietnam()
            reply = f"B√¢y gi·ªù l√† {time_now} (gi·ªù Vi·ªát Nam)"
        else:
            # N·∫øu kh√¥ng r√µ ‚Üí tr·∫£ c·∫£ ng√†y + gi·ªù
            date = get_current_date_vietnam()
            time = get_current_time_vietnam()
            reply = f"{date}, b√¢y gi·ªù l√† {time} (gi·ªù Vi·ªát Nam)"

    # N·∫øu kh√¥ng ph·∫£i th·ªùi gian/th·ªùi ti·∫øt ‚Üí d√πng Gemini
    if not reply:
        reply = model.generate_content(query).text

    with st.chat_message("assistant"):
        st.markdown(reply)
    st.session_state.messages.append({"role": "assistant", "content": reply})